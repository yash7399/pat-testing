name: Build and Push DLL

on:
  push:
    branches:
      - main   # Runs whenever something is pushed to main

# üëá This line is CRUCIAL ‚Äî allows the workflow to push commits/branches
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout your code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup .NET SDK (adjust version if needed)
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # 3Ô∏è‚É£ Restore project dependencies
      - name: Restore dependencies
        run: dotnet restore HelloLib/HelloLib.csproj

      # 4Ô∏è‚É£ Build the project in Release mode
      - name: Build project
        run: dotnet build HelloLib/HelloLib.csproj --configuration Release --no-restore

      # 5Ô∏è‚É£ Copy the DLL to the repo root (so it‚Äôs easy to find)
      - name: Copy DLL to root
        run: cp HelloLib/bin/Release/net8.0/HelloLib.dll .

      # 6Ô∏è‚É£ Commit the DLL and push to a separate branch
      - name: Commit DLL to repo (dll-artifacts branch)
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

          # Fetch and create/overwrite dll-artifacts branch
          git fetch origin
          git checkout -B dll-artifacts

          # Add the DLL file
          git add HelloLib.dll

          # Commit changes only if new DLL is generated
          git commit -m "Add latest DLL from build [skip ci]" || echo "No changes to commit"

          # Push to remote dll-artifacts branch
          git push origin dll-artifacts --force
